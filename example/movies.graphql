type Movie
  @key(fields: "id")
  @grpc__fetch(
    service: MOVIES
    rpc: "BatchGetMovies"
    dig: "movies"
    dataloader: { key: "$args.id", listArgument: "ids", responseKey: "id" }
  ) {
  id: ID!
  title: String @grpc__renamed(from: "name")
  rating: Float
  status: MovieStatus

  sequel: Movie

  director: Person @grpc__wrap(gql: "id", proto: "director_id")

  cast(first: Int, after: String): CastConnection!
    @grpc__fetch(
      service: MOVIES
      rpc: "GetCastForMovie"
      mapArguments: { sourceField: "id", arg: "movie_id" }
    )
}

type Person @key(fields: "id") {
  id: ID!
}

enum MovieStatus {
  CONCEPT
  PREPRODUCTION
  PRODUCTION
  POSTPRODUCTION
  RELEASED
}

type Query {
  movies(
    first: Int @grpc__renamed(from: "limit")
    after: String @grpc__renamed(from: "cursor")
  ): MovieConnection! @grpc__fetch(service: MOVIES, rpc: "ListMovies")

  movie(id: ID!): Movie
    @grpc__fetch(service: MOVIES, rpc: "GetMovie", dig: "movie")

  moviesBatch(ids: [ID!]!): [Movie]!
    @grpc__fetch(service: MOVIES, rpc: "BatchGetMovies", dig: "movies")
}

type Mutation {
  createMovie(movie: MovieInput!): CreateMovieResponse!
    @grpc__fetch(service: MOVIES, rpc: "CreateMovie")

  deleteMovie(id: ID!): DeleteMovieResponse!
    @grpc__fetch(service: MOVIES, rpc: "DeleteMovie")
}

type MovieConnection {
  nodes: [Movie!]! @grpc__renamed(from: "movies")
  pageInfo: PageInfo! @grpc__wrap(proto: "cursor", gql: "endCursor")
}

type PageInfo {
  endCursor: String!
}

input MovieInput {
  id: ID!
  name: String
  rating: Float
  status: MovieStatus
}

type CreateMovieResponse {
  movie: Movie
}

type DeleteMovieResponse {
  deleted: Boolean!
}

type CastConnection {
  nodes: [Person!]! @grpc__renamed(from: "cast")
  pageInfo: PageInfo! @grpc__wrap(proto: "cursor", gql: "endCursor")
}

directive @grpc(
  protoFile: String!
  serviceName: String!
  address: String!
  metadata: [grpc__Metadata!]
) on ENUM_VALUE

input grpc__Metadata {
  name: String!
  value: String
  valueFrom: String
}

enum grpc__Service {
  MOVIES
    @grpc(
      protoFile: "protos/service.proto"
      serviceName: "com.example.Movies"
      address: "localhost:50001"
      metadata: [
        { name: "x-api-key", valueFrom: "req.headers.x-api-key" }
        { name: "cluster", value: "movies" }
      ]
    )
}

directive @grpc__fetch(
  service: grpc__Service!
  rpc: String!
  dig: String
  mapArguments: [grpc__InputMap!]
  dataloader: grpc__Dataloader
) on FIELD_DEFINITION | OBJECT

input grpc__InputMap {
  sourceField: String!
  arg: String!
}

input grpc__Dataloader {
  key: String!
  listArgument: String!
  responseKey: String
}

directive @grpc__renamed(
  from: String!
) on OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

directive @grpc__wrap(
  gql: String!
  proto: String!
) repeatable on FIELD_DEFINITION
